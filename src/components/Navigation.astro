---
import { getCollection } from 'astro:content';
import '../styles/navigation.css';

interface Props {
  isDesktop: boolean;
}

interface NavItem {
  title: string;
  path: string;
  submenu?: NavItem[];
}

const { isDesktop } = Astro.props;
// Get all service pages and sort them by title
const services = await getCollection('services');
const serviceMenu = services
  .filter(service => service.data.includeInMenu)
  .map(service => ({
    title: service.data.menuText || service.data.linkText || service.data.title,
    path: `/${service.slug}/`
  }))
  .sort((a, b) => a.title.localeCompare(b.title));

// Get all region pages that should be included in the menu
const regions = await getCollection('regions');
const regionMenu = regions
  .filter(region => {
    const shouldInclude = region.data.includeInMenu === true;
    return shouldInclude;
  })
  .map(region => ({
    title: region.data.featureTitle || region.data.region,
    path: `/${region.slug}/`
  }))
  .sort((a, b) => a.title.localeCompare(b.title));

// Get all articles and sort them by date
const articles = await getCollection('articles');
const articleMenu = articles
  .filter(article => !article.data.draft) // Only show published articles
  .map(article => ({
    title: article.data.linkText || article.data.title,
    path: `/articles/${article.slug}/`
  }))
  .sort((a, b) => a.title.localeCompare(b.title));

const navigation: NavItem[] = [
  {
    title: "Services",
    path: "/plumbing-services/",
    submenu: serviceMenu
  },
  {
    title: "Regions",
    path: "/service-regions/",
    submenu: regionMenu
  },
  {
    title: "Articles",
    path: "/articles/",
    submenu: articleMenu
  },
  { title: "Contact Us", path: "/contact-us/" },
  { title: "FAQs", path: "/faqs/" }
];

const currentPath = Astro.url.pathname;

function isActive(path: string): boolean {
  return currentPath === path || currentPath.startsWith(path + '/');
}
---

{isDesktop ? (
  <ul class="flex space-x-4">
    {navigation.map(item => (
      <li class="relative group">
        <a
          href={item.path}
          class={`nav-link ${isActive(item.path) ? 'nav-active' : ''} ${item.submenu ? 'has-submenu' : ''}`}
        >
          {item.title}
        </a>
        {item.submenu && (
          <div class="submenu-wrapper">
            <ul class="submenu-list">
              {item.submenu.map(subItem => (
                <li>
                  <a
                    href={subItem.path}
                    class={`submenu-item ${isActive(subItem.path) ? 'active' : ''}`}
                  >
                    {subItem.title}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )}
      </li>
    ))}
  </ul>
) : (
  <div class="mobile-nav">
    <ul class="mobile-nav-list">
    {navigation.map(item => (
      <li class="mobile-nav-item" data-has-submenu={!!item.submenu}>
        {!item.submenu ? (
          <a
            href={item.path}
            class={`mobile-nav-link ${isActive(item.path) ? 'active' : ''}`}
          >
            {item.title}
          </a>
        ) : (
          <div class="mobile-submenu">
            <button
              class={`mobile-submenu-button ${isActive(item.path) ? 'active' : ''}`}
              onclick="this.closest('.mobile-nav-item').classList.toggle('open')"
            >
              <span>{item.title}</span>
              <span class="mobile-submenu-icon">â–¼</span>
            </button>
            <div class="mobile-submenu-content">
              <ul class="mobile-submenu-list">
                {item.submenu.map(subItem => (
                  <li>
                    <a
                      href={subItem.path}
                      class={`mobile-nav-link ${isActive(subItem.path) ? 'active' : ''}`}
                    >
                      {subItem.title}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </li>
    ))}
  </ul>
  </div>
)}


