---
import { getCollection, type CollectionEntry } from 'astro:content';
import ServiceLayout from '@/layouts/ServiceLayout.astro';
import RegionLayout from '@/layouts/RegionLayout.astro';
import ArticleLayout from '@/layouts/ArticleLayout.astro';
import BaseLayout from '@/layouts/BaseLayout.astro';

type ServiceEntry = CollectionEntry<'services'>;
type RegionEntry = CollectionEntry<'regions'>;
type ArticleEntry = CollectionEntry<'articles'>;
type PageEntry = CollectionEntry<'pages'>;
type Entry = ServiceEntry | RegionEntry | ArticleEntry | PageEntry;

interface Props {
  entry: Entry;
}

function isServiceEntry(entry: Entry): entry is ServiceEntry {
  return entry.collection === 'services';
}

function isRegionEntry(entry: Entry): entry is RegionEntry {
  return entry.collection === 'regions';
}

function isArticleEntry(entry: Entry): entry is ArticleEntry {
  return entry.collection === 'articles';
}

export async function getStaticPaths() {
  const services = await getCollection('services');
  const regions = await getCollection('regions');
  const articles = await getCollection('articles');
  const pages = await getCollection('pages');

  const filterDrafts = (entries: Entry[]) => {
    return entries.filter(entry => !entry.data.draft);
  };

  return [
    ...filterDrafts(services).map((entry) => ({
      params: { slug: entry.slug },
      props: { entry, type: 'service' as const },
    })),
    ...filterDrafts(regions).map((entry) => ({
      params: { slug: entry.slug },
      props: { entry, type: 'region' as const },
    })),
    ...filterDrafts(articles).map((entry) => ({
      params: { slug: `articles/${entry.slug}` },
      props: { entry, type: 'article' as const },
    })),
    ...filterDrafts(pages).map((entry) => ({
      params: { slug: entry.slug },
      props: { entry, type: 'page' as const },
    })),
  ];
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

{isServiceEntry(entry) ? (
  <ServiceLayout service={entry} />
) : isRegionEntry(entry) ? (
  <RegionLayout region={entry} />
) : isArticleEntry(entry) ? (
  <ArticleLayout article={entry} />
) : (
  <BaseLayout
    title={entry.data.title}
    description={entry.data.description}
    schema={entry.data.schema}
  >
    <article class="prose prose-lg max-w-none">
      <Content />
    </article>
  </BaseLayout>
)}
