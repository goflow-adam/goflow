---
interface ServiceArea {
  name: string;
  description: string;
  coordinates: number[][][];
}

interface Props {
  className?: string;
  style?: string;
  width?: string;
  center?: [number, number];
  areas?: ServiceArea[];
}

const { 
  className = '',
  style = '',
  width = '100%',
  center = [0,0],
  areas = []
} = Astro.props;
---
<div 
  id="map"
  class={`service-area-map ${className}`}
  style={`width: 100%; height: 100%; ${style}`}
  data-center={JSON.stringify(center)}
  data-areas={JSON.stringify(areas)}
></div>

<script>
  import L from 'leaflet';
  import type { FeatureCollection, Polygon } from 'geojson';
  import 'leaflet/dist/leaflet.css';

  interface ServiceArea {
    name: string;
    description: string;
    coordinates: number[][][];
  }

  // Set up the default icon paths
  const defaultIcon = new L.Icon({
    iconUrl: '/images/marker-icon.png',
    iconRetinaUrl: '/images/marker-icon-2x.png',
    shadowUrl: '/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
  });

  L.Marker.prototype.options.icon = defaultIcon;

  // Initialize the map when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Center coordinates between Sonoma and Marin counties
    const mapElement = document.getElementById('map');
    if (!mapElement) {
      console.error('Map element not found');
      return;
    }
    const center = JSON.parse(mapElement.dataset.center || '[0,0]');
    const map = L.map('map').setView(center, 8);

    // Add OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    // Get service areas from data attribute
    const areas = JSON.parse(mapElement.dataset.areas || '[]');
    
    // Convert areas to GeoJSON
    const serviceAreas: FeatureCollection<Polygon> = {
      "type": "FeatureCollection",
      "features": areas.map((area: ServiceArea) => ({
        "type": "Feature",
        "properties": {
          "name": area.name,
          "description": area.description
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": area.coordinates
        }
      }))
    };

    // Add the service areas to the map
    L.geoJSON(serviceAreas, {
      style: (feature) => {
        return {
          color: '#1F4A6F', // Primary color
          weight: 2,
          opacity: 0.8,
          fillColor: '#1F4A6F',
          fillOpacity: 0.2
        };
      },
      onEachFeature: (feature, layer) => {
        layer.bindPopup(`
          <h3>${feature.properties.name}</h3>
          <p>${feature.properties.description}</p>
        `);
      }
    }).addTo(map);
  });
</script>

<style>
  .service-area-map {
    border-radius: 0.5rem;
    margin: 0;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    z-index: 10;
  }

  /* Import Leaflet CSS */
  :global(.leaflet-container) {
    font-family: inherit;
    z-index: 10;
  }

  :global(.leaflet-popup-content h3) {
    font-size: 1.25rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: #1F4A6F;
  }

  :global(.leaflet-popup-content p) {
    margin: 0;
    color: #4B5563;
  }
</style>
